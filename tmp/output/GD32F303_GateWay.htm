<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\tmp\output\GD32F303_GateWay.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\tmp\output\GD32F303_GateWay.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jul 22 16:28:07 2025
<BR><P>
<H3>Maximum Stack Usage =       1712 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Srv_Ec200s_Task &rArr; BswSrv_Ec200sUrcHandle &rArr; BswSrv_Ec200sAnalyseGprsData &rArr; App_NetMessagePro &rArr; App_RemoteStartChargingHandler &rArr; App_RemoteStartChargingAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC0_1_IRQHandler</a><BR>
 <LI><a href="#[f0]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f0]">cJSON_Delete</a><BR>
 <LI><a href="#[207]">print_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[202]">print_value</a><BR>
 <LI><a href="#[204]">print_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[202]">print_value</a><BR>
 <LI><a href="#[1ff]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1df]">parse_value</a><BR>
 <LI><a href="#[1fc]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1df]">parse_value</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC0_1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">ADC2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5f]">Abstr_Ec200sCheckATE</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckATE) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[60]">Abstr_Ec200sCheckATI</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckATI) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[5e]">Abstr_Ec200sCheckATV</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckATV) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[62]">Abstr_Ec200sCheckCCID</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckCCID) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[64]">Abstr_Ec200sCheckCGREG</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckCGREG) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[66]">Abstr_Ec200sCheckCOPS</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckCOPS) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[61]">Abstr_Ec200sCheckCPIN</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckCPIN) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[65]">Abstr_Ec200sCheckCSQ</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckCSQ) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[63]">Abstr_Ec200sCheckGsn</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckGsn) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[67]">Abstr_Ec200sCheckQNWINFO</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckQNWINFO) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[5d]">Abstr_Ec200sCheckReset</a> from bswabstr_ec200s.o(i.Abstr_Ec200sCheckReset) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[6f]">Abstr_Ec200sMqttCreat</a> from bswabstr_ec200s.o(i.Abstr_Ec200sMqttCreat) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[6a]">Abstr_Ec200sQIACT</a> from bswabstr_ec200s.o(i.Abstr_Ec200sQIACT) referenced 2 times from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[68]">Abstr_Ec200sQICSGP</a> from bswabstr_ec200s.o(i.Abstr_Ec200sQICSGP) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[69]">Abstr_Ec200sQIDEACT</a> from bswabstr_ec200s.o(i.Abstr_Ec200sQIDEACT) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[6c]">Abstr_Ec200sQMTCFGDataformat</a> from bswabstr_ec200s.o(i.Abstr_Ec200sQMTCFGDataformat) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[6b]">Abstr_Ec200sQMTCFGVersion</a> from bswabstr_ec200s.o(i.Abstr_Ec200sQMTCFGVersion) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[6d]">Abstr_Ec200sQMTCFGViewmode</a> from bswabstr_ec200s.o(i.Abstr_Ec200sQMTCFGViewmode) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[6e]">Abstr_Ec200sQMTRecvmode</a> from bswabstr_ec200s.o(i.Abstr_Ec200sQMTRecvmode) referenced from bswabstr_ec200s.o(.constdata)
 <LI><a href="#[51]">Abstr_Ec200sTask</a> from bswabstr_ec200s.o(i.Abstr_Ec200sTask) referenced from main.o(i.App_Main_Task)
 <LI><a href="#[53]">App_ChargeTask</a> from charge.o(i.App_ChargeTask) referenced from main.o(i.App_Main_Task)
 <LI><a href="#[56]">App_CkbProtoTask</a> from app_ckbproto.o(i.App_CkbProtoTask) referenced from main.o(i.App_Main_Task)
 <LI><a href="#[5a]">App_Main_Task</a> from main.o(i.App_Main_Task) referenced from main.o(i.main)
 <LI><a href="#[57]">App_UpgradeTask</a> from bswabstr_ec200s.o(i.App_UpgradeTask) referenced from netmessage.o(i.App_RemoteUpgradeHandler)
 <LI><a href="#[54]">App_audio_task</a> from i2s.o(i.App_audio_task) referenced from main.o(i.App_Main_Task)
 <LI><a href="#[55]">BswSrv_McardTask</a> from mcard.o(i.BswSrv_McardTask) referenced from main.o(i.App_Main_Task)
 <LI><a href="#[8]">BusFault_Handler</a> from gd32f30x_it.o(i.BusFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[23]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel4_IRQHandler</a> from gd32f30x_it.o(i.DMA0_Channel4_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1e]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1f]">DMA0_Channel6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[46]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[47]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[48]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[49]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from gd32f30x_it.o(i.DebugMon_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from device_check.o(i.EXTI0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">EXTI10_15_IRQHandler</a> from device_check.o(i.EXTI10_15_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from device_check.o(i.EXTI1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from device_check.o(i.EXTI2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from device_check.o(i.EXTI3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from device_check.o(i.EXTI4_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[25]">EXTI5_9_IRQHandler</a> from device_check.o(i.EXTI5_9_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[12]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from gd32f30x_it.o(i.HardFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2e]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2d]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[f]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from gd32f30x_it.o(i.MemManage_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from gd32f30x_it.o(i.NMI_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[13]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">SPI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">SPI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[52]">Srv_Ec200s_Task</a> from bswsrv_ec200s.o(i.Srv_Ec200s_Task) referenced from main.o(i.App_Main_Task)
 <LI><a href="#[d]">SysTick_Handler</a> from gd32f30x_it.o(i.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_gd32f30x.o(i.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[26]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[27]">TIMER0_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2a]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">TIMER2_IRQHandler</a> from rtc.o(i.TIMER2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2c]">TIMER3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">TIMER4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[44]">TIMER5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[45]">TIMER6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3b]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3a]">TIMER7_UP_IRQHandler</a> from relay_control.o(i.TIMER7_UP_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">UART3_IRQHandler</a> from usart.o(i.UART3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">UART4_IRQHandler</a> from usart.o(i.UART4_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[33]">USART0_IRQHandler</a> from usart.o(i.USART0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">USART2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[21]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[22]">USBD_LP_CAN0_RX0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from gd32f30x_it.o(i.UsageFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[e]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[4e]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[4f]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4d]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[59]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[58]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[2]">free</a> from mallocr.o(i.__free$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[2]">free</a> from mallocr.o(i.__free$realloc) referenced from cjson.o(i.cJSON_InitHooks)
 <LI><a href="#[50]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[1]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced from cjson.o(i.cJSON_InitHooks)
 <LI><a href="#[5c]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[5b]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[3]">realloc</a> from mallocr.o(i.realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[3]">realloc</a> from mallocr.o(i.realloc) referenced from cjson.o(i.cJSON_InitHooks)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[242]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[70]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[98]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[243]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[244]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[245]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[246]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[247]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23a]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[239]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[248]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e2]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
</UL>

<P><STRONG><a name="[249]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteUpgradeHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleImei
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandle_HeartBeat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
</UL>

<P><STRONG><a name="[24a]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srv_Ec200s_Task
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardTask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Bl0939_Clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Load
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoCardCtrol
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleImei
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEdition
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoLedCtrol
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendOrderToBackstage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChgCtrlProcFuseStatus
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Restore_Charge_State
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckResQcell
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttSub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpenCheck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttDisconnect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttConnect
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttClose
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandle_CardProc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a1]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sUrcHandle
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEdition
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCsq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCell
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCREG
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckResQcell
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTtsResult
</UL>

<P><STRONG><a name="[158]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[b4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_hexStrToChar
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteUpgradeHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sSendCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sQcellSendCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleImei
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>

<P><STRONG><a name="[141]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[1fb]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
</UL>

<P><STRONG><a name="[20a]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[b8]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srv_Ec200s_Task
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[171]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
</UL>

<P><STRONG><a name="[76]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_hexStrToChar
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sUrcHandle
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEdition
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCsq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCell
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCREG
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[78]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[99]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[93]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[7e]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[81]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_double
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_double
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_double
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_double
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[250]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[251]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[252]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[77]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[4d]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>

<P><STRONG><a name="[83]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[253]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[254]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[87]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[255]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[50]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[96]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[256]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>Abstr_CheckModeCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bswabstr_ec200s.o(i.Abstr_CheckModeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Abstr_CheckModeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQMTRecvmode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQMTCFGViewmode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQMTCFGVersion
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQMTCFGDataformat
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQIDEACT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQICSGP
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQIACT
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckQNWINFO
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckGsn
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCSQ
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCPIN
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCOPS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCGREG
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCCID
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckATV
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckATI
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckATE
</UL>

<P><STRONG><a name="[9c]"></a>Abstr_Ec200sCheckRes</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_GetCharFromFifo
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleImei
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEdition
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCsq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCREG
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTtsResult
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sSendCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendData
</UL>

<P><STRONG><a name="[a9]"></a>Abstr_Ec200sCheckResQcell</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckResQcell))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Abstr_Ec200sCheckResQcell &rArr; GetCell &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_GetCharFromFifo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCell
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sQcellSendCmd
</UL>

<P><STRONG><a name="[bb]"></a>Abstr_Ec200sHttpGetFrimware</STRONG> (Thumb, 1040 bytes, Stack size 160 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sHttpGetFrimware))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Abstr_Ec200sHttpGetFrimware &rArr; Abstr_Ec200sGetHttpData &rArr; Abstr_Ec200sGetHttpDataSize &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read_Flash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Flash_Erase
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Ledturnoff
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_FifoFlush
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_16
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSetHttpDownStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendRepeatCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeTask
</UL>

<P><STRONG><a name="[cb]"></a>Abstr_Ec200sMqttInit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sMqttInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Abstr_Ec200sMqttInit &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleImei
</UL>

<P><STRONG><a name="[cd]"></a>Abstr_Ec200sMqttPublish</STRONG> (Thumb, 300 bytes, Stack size 192 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sMqttPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200s_SendNotify
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
</UL>

<P><STRONG><a name="[d0]"></a>Abstr_Ec200sQcell</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sQcell))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Abstr_Ec200sQcell &rArr; Abstr_Ec200sQcellSendCmd &rArr; _Abstr_Ec200sQcellSendCmd &rArr; Abstr_Ec200sCheckResQcell &rArr; GetCell &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQcellSendCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[d1]"></a>Abstr_Ec200sQcellSendCmd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sQcellSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Abstr_Ec200sQcellSendCmd &rArr; _Abstr_Ec200sQcellSendCmd &rArr; Abstr_Ec200sCheckResQcell &rArr; GetCell &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sQcellSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQcell
</UL>

<P><STRONG><a name="[d3]"></a>Abstr_Ec200sReconnect</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sReconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Abstr_Ec200sReconnect &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sTask
</UL>

<P><STRONG><a name="[ae]"></a>Abstr_Ec200sSendCmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sSendCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sReconnect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSocketStatusCheck
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendRepeatCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttSub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpenCheck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttDisconnect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttConnect
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttClose
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckReset
</UL>

<P><STRONG><a name="[ce]"></a>Abstr_Ec200sSendData</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Abstr_Ec200sSendData &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sUartSend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
</UL>

<P><STRONG><a name="[bd]"></a>Abstr_Ec200sSetHttpDownStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sSetHttpDownStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>

<P><STRONG><a name="[51]"></a>Abstr_Ec200sTask</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Abstr_Ec200sTask &rArr; Abstr_Ec200sReconnect &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200s_GetState
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sReconnect
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSocketStatusCheck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.App_Main_Task)
</UL>
<P><STRONG><a name="[d8]"></a>Abstr_Ec200s_GetState</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bswabstr_ec200s.o(i.Abstr_Ec200s_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sTask
</UL>

<P><STRONG><a name="[cf]"></a>Abstr_Ec200s_SendNotify</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bswabstr_ec200s.o(i.Abstr_Ec200s_SendNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Abstr_Ec200s_SendNotify &rArr; xTaskGenericNotify &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
</UL>

<P><STRONG><a name="[da]"></a>App_Audio_Data_Init</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, i2s.o(i.App_Audio_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = App_Audio_Data_Init &rArr; BswSrv_GD25xx_BufferRead &rArr; Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_GD25xx_BufferRead
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[dc]"></a>App_BackgroundOpenProc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, charge.o(i.App_BackgroundOpenProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_BackgroundOpenProc &rArr; App_Relay_Control &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
</UL>

<P><STRONG><a name="[df]"></a>App_Bl0939_Clear</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, meter.o(i.App_Bl0939_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = App_Bl0939_Clear &rArr; Bsp_Bl0939_Write &rArr; Bsp_Bl0939_Read &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Bl0939_Init
</UL>

<P><STRONG><a name="[e2]"></a>App_Bl0939_Init</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, meter.o(i.App_Bl0939_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = App_Bl0939_Init &rArr; App_Bl0939_Clear &rArr; Bsp_Bl0939_Write &rArr; Bsp_Bl0939_Read &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Bl0939_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[e3]"></a>App_ChagreControl</STRONG> (Thumb, 524 bytes, Stack size 96 bytes, charge.o(i.App_ChagreControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = App_ChagreControl &rArr; App_StopChargingPro &rArr; App_GenerateOrderInfo &rArr; App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingPro
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PowerControl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
</UL>

<P><STRONG><a name="[13e]"></a>App_ChargeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, charge.o(i.App_ChargeInit))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Restore_Charge_State
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
</UL>

<P><STRONG><a name="[e8]"></a>App_ChargeStopNotify</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, netmessage.o(i.App_ChargeStopNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = App_ChargeStopNotify &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendOrderToBackstage
</UL>

<P><STRONG><a name="[53]"></a>App_ChargeTask</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, charge.o(i.App_ChargeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = App_ChargeTask &rArr; App_ChagreControl &rArr; App_StopChargingPro &rArr; App_GenerateOrderInfo &rArr; App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Load
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Energy_Load
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Deal_Bl0939_Data
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BackgroundOpenProc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Control_All
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.App_Main_Task)
</UL>
<P><STRONG><a name="[f5]"></a>App_ChgCtrlMoneyCount</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, charge.o(i.App_ChgCtrlMoneyCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = App_ChgCtrlMoneyCount &rArr; App_StopChargingPro &rArr; App_GenerateOrderInfo &rArr; App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingPro
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[f6]"></a>App_ChgCtrlProcFuseStatus</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, device_check.o(i.App_ChgCtrlProcFuseStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = App_ChgCtrlProcFuseStatus &rArr; App_StopChargingPro &rArr; App_GenerateOrderInfo &rArr; App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fuse_Check
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingPro
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[f8]"></a>App_CkbConnectStatuProc</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_ckbproto.o(i.App_CkbConnectStatuProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_CkbConnectStatuProc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[fb]"></a>App_CkbProtoCardCtrol</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_ckbproto.o(i.App_CkbProtoCardCtrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = App_CkbProtoCardCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoSendPkt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardProcess
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandle_CardProc
</UL>

<P><STRONG><a name="[fd]"></a>App_CkbProtoHandleData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_ckbproto.o(i.App_CkbProtoHandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = App_CkbProtoHandleData &rArr; App_CkbProtoHandle_CardProc &rArr; App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandle_HeartBeat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandle_CardProc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoTask
</UL>

<P><STRONG><a name="[101]"></a>App_CkbProtoHeartBeatAck</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_ckbproto.o(i.App_CkbProtoHeartBeatAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = App_CkbProtoHeartBeatAck &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoSendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandle_HeartBeat
</UL>

<P><STRONG><a name="[100]"></a>App_CkbProtoLedCtrol</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_ckbproto.o(i.App_CkbProtoLedCtrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoSendPkt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandle_CardProc
</UL>

<P><STRONG><a name="[56]"></a>App_CkbProtoTask</STRONG> (Thumb, 390 bytes, Stack size 264 bytes, app_ckbproto.o(i.App_CkbProtoTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = App_CkbProtoTask &rArr; App_CkbProtoHandleData &rArr; App_CkbProtoHandle_CardProc &rArr; App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartGetOneData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandleData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.App_Main_Task)
</UL>
<P><STRONG><a name="[f4]"></a>App_Deal_Bl0939_Data</STRONG> (Thumb, 2792 bytes, Stack size 32 bytes, meter.o(i.App_Deal_Bl0939_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = App_Deal_Bl0939_Data &rArr; Bsp_Read_Data &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SetPortStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_Data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
</UL>

<P><STRONG><a name="[f3]"></a>App_Energy_Load</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, meter.o(i.App_Energy_Load))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
</UL>

<P><STRONG><a name="[c0]"></a>App_Flash_Erase</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, flash.o(i.App_Flash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_Flash_Erase &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>

<P><STRONG><a name="[f7]"></a>App_Fuse_Check</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, device_check.o(i.App_Fuse_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_Fuse_Check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SetPortStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChgCtrlProcFuseStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Restore_Charge_State
</UL>

<P><STRONG><a name="[10d]"></a>App_GenerateOrderInfo</STRONG> (Thumb, 202 bytes, Stack size 112 bytes, order.o(i.App_GenerateOrderInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = App_GenerateOrderInfo &rArr; App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Save
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Control
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Ctrl
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_TtsPlayStopChgTip
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoLedCtrol
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WriteOrder
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingPro
</UL>

<P><STRONG><a name="[133]"></a>App_GetChargeTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, charge.o(i.App_GetChargeTime))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PowerControl
</UL>

<P><STRONG><a name="[112]"></a>App_GetOrderCnt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, order.o(i.App_GetOrderCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_GetOrderCnt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoveFirstOrder
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadFirstOrder
</UL>

<P><STRONG><a name="[e4]"></a>App_GetRtcCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.App_GetRtcCount))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardProcess
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoTask
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbConnectStatuProc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChgCtrlProcFuseStatus
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fuse_Check
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingPro
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PowerControl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandle_HeartBeat
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
</UL>

<P><STRONG><a name="[113]"></a>App_HeartBeatHandler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, netmessage.o(i.App_HeartBeatHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = App_HeartBeatHandler &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
</UL>

<P><STRONG><a name="[116]"></a>App_HeartBeatSendMessage</STRONG> (Thumb, 878 bytes, Stack size 752 bytes, netmessage.o(i.App_HeartBeatSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = App_HeartBeatSendMessage &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200s_SendNotify
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[119]"></a>App_I2S_SendData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, i2s.o(i.App_I2S_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_I2S_SendData &rArr; dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
</UL>

<P><STRONG><a name="[10e]"></a>App_Led_Ctrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(i.App_Led_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Restore_Charge_State
</UL>

<P><STRONG><a name="[bf]"></a>App_Ledturnoff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(i.App_Ledturnoff))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>

<P><STRONG><a name="[11e]"></a>App_LocationMessage</STRONG> (Thumb, 442 bytes, Stack size 128 bytes, netmessage.o(i.App_LocationMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = App_LocationMessage &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[11f]"></a>App_LocationMessageHandler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, netmessage.o(i.App_LocationMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = App_LocationMessageHandler &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_IsNumber
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
</UL>

<P><STRONG><a name="[5a]"></a>App_Main_Task</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, main.o(i.App_Main_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = App_Main_Task &rArr; App_HeartBeatSendMessage &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Save
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendOrderToBackstage
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Qrledtoggle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OrderInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardProcess
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbConnectStatuProc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChgCtrlProcFuseStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChgCtrlMoneyCount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Bl0939_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_Data_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQcell
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[128]"></a>App_McardMessageHandler</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, netmessage.o(i.App_McardMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = App_McardMessageHandler &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_TtsPlayUserMoney
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoCardCtrol
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
</UL>

<P><STRONG><a name="[127]"></a>App_McardProcess</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mcard.o(i.App_McardProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = App_McardProcess &rArr; App_SendCardAuthReq &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoCardCtrol
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[12b]"></a>App_NetMessagePro</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, netmessage.o(i.App_NetMessagePro))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = App_NetMessagePro &rArr; App_RemoteStartChargingHandler &rArr; App_RemoteStartChargingAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingNotifyHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessageHandler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteUpgradeHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlHandler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessageHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[122]"></a>App_OrderInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, order.o(i.App_OrderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = App_OrderInit &rArr; App_Order_Clear &rArr; App_Write_Flash &rArr; Bsp_WriteWord &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read_Flash
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Order_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[132]"></a>App_Order_Clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, order.o(i.App_Order_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = App_Order_Clear &rArr; App_Write_Flash &rArr; Bsp_WriteWord &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OrderInit
</UL>

<P><STRONG><a name="[e5]"></a>App_PowerControl</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, charge.o(i.App_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = App_PowerControl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetChargeTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
</UL>

<P><STRONG><a name="[124]"></a>App_Qrledtoggle</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, led.o(i.App_Qrledtoggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Qrledtoggle
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[134]"></a>App_ReadFirstOrder</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, order.o(i.App_ReadFirstOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = App_ReadFirstOrder &rArr; App_GetOrderCnt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read_Flash
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetOrderCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendOrderToBackstage
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WriteOrder
</UL>

<P><STRONG><a name="[c3]"></a>App_Read_Flash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash.o(i.App_Read_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Read_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Save
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OrderInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Load
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadFirstOrder
</UL>

<P><STRONG><a name="[de]"></a>App_Relay_Control</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, relay_control.o(i.App_Relay_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_Relay_Control &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Restore_Charge_State
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BackgroundOpenProc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Control_All
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
</UL>

<P><STRONG><a name="[f1]"></a>App_Relay_Control_All</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, relay_control.o(i.App_Relay_Control_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = App_Relay_Control_All &rArr; App_Relay_Control &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
</UL>

<P><STRONG><a name="[135]"></a>App_Relay_Delay_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, relay_control.o(i.App_Relay_Delay_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = App_Relay_Delay_Start &rArr; timer7_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>App_Relay_OFF</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, relay_control.o(i.App_Relay_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Relay_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>App_Relay_ON</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, relay_control.o(i.App_Relay_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Relay_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>App_RemoteControlAck</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, netmessage.o(i.App_RemoteControlAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = App_RemoteControlAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlHandler
</UL>

<P><STRONG><a name="[131]"></a>App_RemoteControlHandler</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, netmessage.o(i.App_RemoteControlHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = App_RemoteControlHandler &rArr; App_RemoteControlAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
</UL>

<P><STRONG><a name="[13a]"></a>App_RemoteStartChargingAck</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, netmessage.o(i.App_RemoteStartChargingAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = App_RemoteStartChargingAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
</UL>

<P><STRONG><a name="[12d]"></a>App_RemoteStartChargingHandler</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, netmessage.o(i.App_RemoteStartChargingHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = App_RemoteStartChargingHandler &rArr; App_RemoteStartChargingAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Save
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Control
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArraySize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_TtsPlayStartChgTip
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_IsString
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_IsNumber
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoLedCtrol
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
</UL>

<P><STRONG><a name="[140]"></a>App_RemoteStopChargingAck</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, netmessage.o(i.App_RemoteStopChargingAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = App_RemoteStopChargingAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingHandler
</UL>

<P><STRONG><a name="[12e]"></a>App_RemoteStopChargingHandler</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, netmessage.o(i.App_RemoteStopChargingHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = App_RemoteStopChargingHandler &rArr; App_RemoteStopChargingAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
</UL>

<P><STRONG><a name="[130]"></a>App_RemoteUpgradeHandler</STRONG> (Thumb, 100 bytes, Stack size 160 bytes, netmessage.o(i.App_RemoteUpgradeHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = App_RemoteUpgradeHandler &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
</UL>

<P><STRONG><a name="[142]"></a>App_RemoveFirstOrder</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, order.o(i.App_RemoveFirstOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = App_RemoveFirstOrder &rArr; App_Write_Flash &rArr; Bsp_WriteWord &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetOrderCnt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendOrderToBackstage
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingNotifyHandler
</UL>

<P><STRONG><a name="[143]"></a>App_Restore_Charge_State</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, charge.o(i.App_Restore_Charge_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_Restore_Charge_State &rArr; App_Fuse_Check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fuse_Check
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Control
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Ctrl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Load
</UL>

<P><STRONG><a name="[12a]"></a>App_SendCardAuthReq</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, netmessage.o(i.App_SendCardAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = App_SendCardAuthReq &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardProcess
</UL>

<P><STRONG><a name="[126]"></a>App_SendOrderToBackstage</STRONG> (Thumb, 142 bytes, Stack size 112 bytes, order.o(i.App_SendOrderToBackstage))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = App_SendOrderToBackstage &rArr; App_ChargeStopNotify &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Save
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_AccCheckSum
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoveFirstOrder
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadFirstOrder
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[159]"></a>App_Set_Rtc_Time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.App_Set_Rtc_Time))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[125]"></a>App_StartUpMessage</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, netmessage.o(i.App_StartUpMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = App_StartUpMessage &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[12c]"></a>App_StartUpMessageHandler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, netmessage.o(i.App_StartUpMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = App_StartUpMessageHandler &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_IsNumber
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
</UL>

<P><STRONG><a name="[12f]"></a>App_StopChargingNotifyHandler</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, netmessage.o(i.App_StopChargingNotifyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = App_StopChargingNotifyHandler &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Save
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoveFirstOrder
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
</UL>

<P><STRONG><a name="[e6]"></a>App_StopChargingPro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, charge.o(i.App_StopChargingPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = App_StopChargingPro &rArr; App_GenerateOrderInfo &rArr; App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChgCtrlProcFuseStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChgCtrlMoneyCount
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
</UL>

<P><STRONG><a name="[f2]"></a>App_System_Order_Load</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, start.o(i.App_System_Order_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = App_System_Order_Load &rArr; App_System_Order_Save &rArr; App_Write_Flash &rArr; Bsp_WriteWord &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Save
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read_Flash
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Restore_Charge_State
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
</UL>

<P><STRONG><a name="[111]"></a>App_System_Order_Save</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, start.o(i.App_System_Order_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = App_System_Order_Save &rArr; App_Write_Flash &rArr; Bsp_WriteWord &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read_Flash
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendOrderToBackstage
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Load
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingNotifyHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
</UL>

<P><STRONG><a name="[145]"></a>App_UartFlushFifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart.o(i.App_UartFlushFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_UartFlushFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_FifoFlush
</UL>

<P><STRONG><a name="[104]"></a>App_UartGetOneData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usart.o(i.App_UartGetOneData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_UartGetOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoTask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_GetCharFromFifo
</UL>

<P><STRONG><a name="[148]"></a>App_UpgradeAckHandler</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, netmessage.o(i.App_UpgradeAckHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = App_UpgradeAckHandler &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeTask
</UL>

<P><STRONG><a name="[57]"></a>App_UpgradeTask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.App_UpgradeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = App_UpgradeTask &rArr; Abstr_Ec200sHttpGetFrimware &rArr; Abstr_Ec200sGetHttpData &rArr; Abstr_Ec200sGetHttpDataSize &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmessage.o(i.App_RemoteUpgradeHandler)
</UL>
<P><STRONG><a name="[110]"></a>App_WriteOrder</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, order.o(i.App_WriteOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = App_WriteOrder &rArr; App_Write_Flash &rArr; Bsp_WriteWord &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_AccCheckSum
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Checkbuff
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadFirstOrder
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
</UL>

<P><STRONG><a name="[c2]"></a>App_Write_Flash</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, flash.o(i.App_Write_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = App_Write_Flash &rArr; Bsp_WriteWord &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WriteWord
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Save
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WriteOrder
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoveFirstOrder
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Order_Clear
</UL>

<P><STRONG><a name="[54]"></a>App_audio_task</STRONG> (Thumb, 358 bytes, Stack size 0 bytes, i2s.o(i.App_audio_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = App_audio_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_GD25xx_BufferRead
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2S_SendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.App_Main_Task)
</UL>
<P><STRONG><a name="[144]"></a>Bsp_AccCheckSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys.o(i.Bsp_AccCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_AccCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendOrderToBackstage
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WriteOrder
</UL>

<P><STRONG><a name="[e1]"></a>Bsp_Bl0939_Read</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, meter.o(i.Bsp_Bl0939_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Bsp_Bl0939_Read &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_CountUsed
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Flush
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Bl0939_Clear
</UL>

<P><STRONG><a name="[e0]"></a>Bsp_Bl0939_Write</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, meter.o(i.Bsp_Bl0939_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Bsp_Bl0939_Write &rArr; Bsp_Bl0939_Read &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Bl0939_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Bl0939_Clear
</UL>

<P><STRONG><a name="[14a]"></a>Bsp_Checkbuff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, order.o(i.Bsp_Checkbuff))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WriteOrder
</UL>

<P><STRONG><a name="[14e]"></a>Bsp_DebugSend</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usart.o(i.Bsp_DebugSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Bsp_DebugSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[dd]"></a>Bsp_GetPortStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, meter.o(i.Bsp_GetPortStatus))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fuse_Check
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Deal_Bl0939_Data
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Restore_Charge_State
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BackgroundOpenProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>Bsp_Read_Data</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, meter.o(i.Bsp_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Bsp_Read_Data &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_CountUsed
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Flush
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Deal_Bl0939_Data
</UL>

<P><STRONG><a name="[106]"></a>Bsp_SetPortStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, meter.o(i.Bsp_SetPortStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fuse_Check
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Deal_Bl0939_Data
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>Bsp_UartSendData</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usart.o(i.Bsp_UartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_Data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sUartSend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoSendPkt
</UL>

<P><STRONG><a name="[14b]"></a>Bsp_WriteWord</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, flash.o(i.Bsp_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_WriteWord &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
</UL>

<P><STRONG><a name="[ac]"></a>BswDrv_Ec200sPowerOff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bswdrv_ec200s.o(i.BswDrv_Ec200sPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BswDrv_Ec200sPowerOff &rArr; Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckReset
</UL>

<P><STRONG><a name="[ad]"></a>BswDrv_Ec200sPowerOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bswdrv_ec200s.o(i.BswDrv_Ec200sPowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BswDrv_Ec200sPowerOn &rArr; Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckReset
</UL>

<P><STRONG><a name="[b5]"></a>BswDrv_Ec200sUartSend</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bswdrv_ec200s.o(i.BswDrv_Ec200sUartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BswDrv_Ec200sUartSend &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sSendCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sQcellSendCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
</UL>

<P><STRONG><a name="[b3]"></a>BswDrv_Ec200s_FifoFlush</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bswdrv_ec200s.o(i.BswDrv_Ec200s_FifoFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BswDrv_Ec200s_FifoFlush &rArr; App_UartFlushFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartFlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sSendCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abstr_Ec200sQcellSendCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
</UL>

<P><STRONG><a name="[a0]"></a>BswDrv_Ec200s_GetCharFromFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bswdrv_ec200s.o(i.BswDrv_Ec200s_GetCharFromFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BswDrv_Ec200s_GetCharFromFifo &rArr; App_UartGetOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartGetOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckResQcell
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
</UL>

<P><STRONG><a name="[155]"></a>BswSrv_Ec200sAnalyseGprsData</STRONG> (Thumb, 398 bytes, Stack size 1000 bytes, bswsrv_ec200s.o(i.BswSrv_Ec200sAnalyseGprsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = BswSrv_Ec200sAnalyseGprsData &rArr; App_NetMessagePro &rArr; App_RemoteStartChargingHandler &rArr; App_RemoteStartChargingAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Set_Rtc_Time
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_hexStrToChar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_IsString
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_IsNumber
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NetMessagePro
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sUrcHandle
</UL>

<P><STRONG><a name="[15b]"></a>BswSrv_Ec200sUrcHandle</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, bswsrv_ec200s.o(i.BswSrv_Ec200sUrcHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = BswSrv_Ec200sUrcHandle &rArr; BswSrv_Ec200sAnalyseGprsData &rArr; App_NetMessagePro &rArr; App_RemoteStartChargingHandler &rArr; App_RemoteStartChargingAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srv_Ec200s_Task
</UL>

<P><STRONG><a name="[db]"></a>BswSrv_GD25xx_BufferRead</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, app_gd25xx.o(i.BswSrv_GD25xx_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BswSrv_GD25xx_BufferRead &rArr; Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_Data_Init
</UL>

<P><STRONG><a name="[15d]"></a>BswSrv_McardCheck</STRONG> (Thumb, 224 bytes, Stack size 128 bytes, mcard.o(i.BswSrv_McardCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BswSrv_McardCheck &rArr; TypeA_CardActivate &rArr; TypeA_Anticollision &rArr; Pcd_Comm &rArr; Clear_FIFO &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Halt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActivate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardTask
</UL>

<P><STRONG><a name="[55]"></a>BswSrv_McardTask</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, mcard.o(i.BswSrv_McardTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BswSrv_McardTask &rArr; BswSrv_McardCheck &rArr; TypeA_CardActivate &rArr; TypeA_Anticollision &rArr; Pcd_Comm &rArr; Clear_FIFO &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.App_Main_Task)
</UL>
<P><STRONG><a name="[13f]"></a>BswSrv_TtsPlayStartChgTip</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_voice.o(i.BswSrv_TtsPlayStartChgTip))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
</UL>

<P><STRONG><a name="[10f]"></a>BswSrv_TtsPlayStopChgTip</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_voice.o(i.BswSrv_TtsPlayStopChgTip))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GenerateOrderInfo
</UL>

<P><STRONG><a name="[129]"></a>BswSrv_TtsPlayUserMoney</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, app_voice.o(i.BswSrv_TtsPlayUserMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BswSrv_TtsPlayUserMoney
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
</UL>

<P><STRONG><a name="[157]"></a>BswSrv_hexStrToChar</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sys.o(i.BswSrv_hexStrToChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = BswSrv_hexStrToChar &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>CRC16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sys.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Save
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Load
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
</UL>

<P><STRONG><a name="[c1]"></a>CRC_16</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, bswabstr_ec200s.o(i.CRC_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_16
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>

<P><STRONG><a name="[165]"></a>Clear_BitMask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fm175xx.o(i.Clear_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Clear_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Halt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>

<P><STRONG><a name="[168]"></a>Clear_FIFO</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm175xx.o(i.Clear_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Clear_FIFO &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>

<P><STRONG><a name="[1d]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f30x_it.o(i.DMA0_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA0_Channel4_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>Delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbConnectStatuProc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQcell
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_Data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Restore_Charge_State
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_GD25xx_BufferRead
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sPowerOn
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sPowerOff
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
</UL>

<P><STRONG><a name="[16c]"></a>Delay_us</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, timer.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device_check.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SetPortStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, device_check.o(i.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI10_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SetPortStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device_check.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SetPortStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device_check.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SetPortStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device_check.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SetPortStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device_check.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SetPortStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, device_check.o(i.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EXTI5_9_IRQHandler &rArr; App_Relay_Delay_Start &rArr; timer7_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SetPortStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetPortStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Delay_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>FIFO_S_CountUsed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(i.FIFO_S_CountUsed))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_Data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Read
</UL>

<P><STRONG><a name="[146]"></a>FIFO_S_Flush</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fifo.o(i.FIFO_S_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_Data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartFlushFifo
</UL>

<P><STRONG><a name="[147]"></a>FIFO_S_Get</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fifo.o(i.FIFO_S_Get))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srv_Ec200s_Task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_Data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Read
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartGetOneData
</UL>

<P><STRONG><a name="[1b0]"></a>FIFO_S_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fifo.o(i.FIFO_S_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[195]"></a>FIFO_S_Put</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fifo.o(i.FIFO_S_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFO_S_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>FM175XX_HardReset</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fm175xx.o(i.FM175XX_HardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FM175XX_HardReset &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardTask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_Init
</UL>

<P><STRONG><a name="[160]"></a>FM175XX_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fm175xx.o(i.FM175XX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FM175XX_Init &rArr; Set_Rf &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardTask
</UL>

<P><STRONG><a name="[9f]"></a>Feed_Watchdog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, watchdog.o(i.Feed_Watchdog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Feed_Watchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Flash_Erase
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckResQcell
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
</UL>

<P><STRONG><a name="[a2]"></a>GetCREG</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bswabstr_ec200s.o(i.GetCREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GetCREG &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
</UL>

<P><STRONG><a name="[a4]"></a>GetCcidSn</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.GetCcidSn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetCcidSn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
</UL>

<P><STRONG><a name="[ab]"></a>GetCell</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, bswabstr_ec200s.o(i.GetCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GetCell &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckResQcell
</UL>

<P><STRONG><a name="[a3]"></a>GetCsq</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bswabstr_ec200s.o(i.GetCsq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
</UL>

<P><STRONG><a name="[a6]"></a>GetEdition</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.GetEdition))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GetEdition &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
</UL>

<P><STRONG><a name="[a5]"></a>GetModuleImei</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.GetModuleImei))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetModuleImei &rArr; Abstr_Ec200sMqttInit &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
</UL>

<P><STRONG><a name="[a7]"></a>GetSocketState</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, bswabstr_ec200s.o(i.GetSocketState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetSocketState &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>Pcd_Comm</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, fm175xx.o(i.Pcd_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Pcd_Comm &rArr; Clear_FIFO &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Halt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[163]"></a>Pcd_ConfigISOType</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, fm175xx.o(i.Pcd_ConfigISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Pcd_ConfigISOType &rArr; Clear_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardTask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_Init
</UL>

<P><STRONG><a name="[175]"></a>Pcd_SetTimer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fm175xx.o(i.Pcd_SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Pcd_SetTimer &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Halt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[176]"></a>RCU_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gpio.o(i.RCU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_GpioInit
</UL>

<P><STRONG><a name="[174]"></a>Read_FIFO</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fm175xx.o(i.Read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_FIFO &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>

<P><STRONG><a name="[166]"></a>Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fm175xx.o(i.Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>

<P><STRONG><a name="[179]"></a>Rtc_TimerInit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rtc.o(i.Rtc_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Rtc_TimerInit &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_prescaler_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[178]"></a>SPIRead</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fm175xx.o(i.SPIRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiReadData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>

<P><STRONG><a name="[182]"></a>SPIWrite</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fm175xx.o(i.SPIWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIWrite &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
</UL>

<P><STRONG><a name="[169]"></a>Set_BitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fm175xx.o(i.Set_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Halt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
</UL>

<P><STRONG><a name="[164]"></a>Set_Rf</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fm175xx.o(i.Set_Rf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set_Rf &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardTask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_Init
</UL>

<P><STRONG><a name="[15c]"></a>SpiReadWrite</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(i.SpiReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_GD25xx_BufferRead
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiReadData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>

<P><STRONG><a name="[52]"></a>Srv_Ec200s_Task</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, bswsrv_ec200s.o(i.Srv_Ec200s_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = Srv_Ec200s_Task &rArr; BswSrv_Ec200sUrcHandle &rArr; BswSrv_Ec200sAnalyseGprsData &rArr; App_NetMessagePro &rArr; App_RemoteStartChargingHandler &rArr; App_RemoteStartChargingAck &rArr; Abstr_Ec200sMqttPublish &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Get
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sUrcHandle
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.App_Main_Task)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, system_gd32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>System_Start_Config</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, start.o(i.System_Start_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = System_Start_Config &rArr; cJSON_InitHooks &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InitHooks
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
</UL>

<P><STRONG><a name="[2a]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, relay_control.o(i.TIMER7_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER7_UP_IRQHandler &rArr; App_Relay_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_disable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_ON
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_OFF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18e]"></a>TypeA_Anticollision</STRONG> (Thumb, 416 bytes, Stack size 80 bytes, mcard.o(i.TypeA_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TypeA_Anticollision &rArr; Pcd_Comm &rArr; Clear_FIFO &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Set_NVB
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Set_Bit_Framing
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActivate
</UL>

<P><STRONG><a name="[15e]"></a>TypeA_CardActivate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mcard.o(i.TypeA_CardActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TypeA_CardActivate &rArr; TypeA_Anticollision &rArr; Pcd_Comm &rArr; Clear_FIFO &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
</UL>

<P><STRONG><a name="[15f]"></a>TypeA_Halt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mcard.o(i.TypeA_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TypeA_Halt &rArr; Pcd_Comm &rArr; Clear_FIFO &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
</UL>

<P><STRONG><a name="[191]"></a>TypeA_Request</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, mcard.o(i.TypeA_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TypeA_Request &rArr; Pcd_Comm &rArr; Clear_FIFO &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActivate
</UL>

<P><STRONG><a name="[192]"></a>TypeA_Select</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, mcard.o(i.TypeA_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TypeA_Select &rArr; Pcd_Comm &rArr; Clear_FIFO &rArr; Set_BitMask &rArr; Read_Reg &rArr; SPIRead &rArr; YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActivate
</UL>

<P><STRONG><a name="[190]"></a>TypeA_Set_Bit_Framing</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, mcard.o(i.TypeA_Set_Bit_Framing))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[18f]"></a>TypeA_Set_NVB</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, mcard.o(i.TypeA_Set_NVB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TypeA_Set_NVB
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[42]"></a>UART3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART3_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART0_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>Write_FIFO</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fm175xx.o(i.Write_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Write_FIFO &rArr; Write_Reg &rArr; SPIWrite &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>

<P><STRONG><a name="[167]"></a>Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fm175xx.o(i.Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Write_Reg &rArr; SPIWrite &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Halt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>

<P><STRONG><a name="[197]"></a>YA_4G_Pwr_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.YA_4G_Pwr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = YA_4G_Pwr_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_GpioInit
</UL>

<P><STRONG><a name="[199]"></a>YA_Adc_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, adc.o(i.YA_Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = YA_Adc_Init &rArr; adc_inserted_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_config
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1a5]"></a>YA_BUZE_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(i.YA_BUZE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = YA_BUZE_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_GpioInit
</UL>

<P><STRONG><a name="[1a6]"></a>YA_ComInit</STRONG> (Thumb, 608 bytes, Stack size 16 bytes, usart.o(i.YA_ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = YA_ComInit &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_uart_init
</UL>

<P><STRONG><a name="[1b2]"></a>YA_Disboard_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(i.YA_Disboard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = YA_Disboard_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_GpioInit
</UL>

<P><STRONG><a name="[1b3]"></a>YA_Fuse_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.YA_Fuse_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = YA_Fuse_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_GpioInit
</UL>

<P><STRONG><a name="[1b4]"></a>YA_GpioInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(i.YA_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = YA_GpioInit &rArr; YA_Zero_Det_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Zero_Det_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Relay_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Insert_Det_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Fuse_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Disboard_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_BUZE_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_4G_Pwr_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1b6]"></a>YA_Insert_Det_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(i.YA_Insert_Det_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = YA_Insert_Det_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_GpioInit
</UL>

<P><STRONG><a name="[1b5]"></a>YA_Relay_Init</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, gpio.o(i.YA_Relay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = YA_Relay_Init &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_GpioInit
</UL>

<P><STRONG><a name="[1b8]"></a>YA_SpiInit</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, spi.o(i.YA_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = YA_SpiInit &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_crc_polynomial_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[181]"></a>YA_SpiReadData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi.o(i.YA_SpiReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = YA_SpiReadData &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>

<P><STRONG><a name="[1bc]"></a>YA_TimerInit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, timer.o(i.YA_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = YA_TimerInit &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_prescaler_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1bd]"></a>YA_Watchdog_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, watchdog.o(i.YA_Watchdog_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = YA_Watchdog_Init &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_periph_enable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_enable
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1b7]"></a>YA_Zero_Det_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio.o(i.YA_Zero_Det_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = YA_Zero_Det_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_enable
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_GpioInit
</UL>

<P><STRONG><a name="[1c6]"></a>YA_uart_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usart.o(i.YA_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = YA_uart_init &rArr; YA_ComInit &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[d2]"></a>_Abstr_Ec200sQcellSendCmd</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bswabstr_ec200s.o(i._Abstr_Ec200sQcellSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _Abstr_Ec200sQcellSendCmd &rArr; Abstr_Ec200sCheckResQcell &rArr; GetCell &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_FifoFlush
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sUartSend
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckResQcell
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQcellSendCmd
</UL>

<P><STRONG><a name="[d4]"></a>_Abstr_Ec200sSendCmd</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bswabstr_ec200s.o(i._Abstr_Ec200sSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_FifoFlush
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sUartSend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
</UL>

<P><STRONG><a name="[1c7]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[258]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srv_Ec200s_Task
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardProcess
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoTask
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbConnectStatuProc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChgCtrlMoneyCount
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Audio_Data_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sTask
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQcell
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bl0939_Write
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_System_Order_Load
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fuse_Check
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Deal_Bl0939_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingPro
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PowerControl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Control
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset_reason
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingNotifyHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessageHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteUpgradeHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessageHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sUrcHandle
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleImei
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEdition
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCsq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCell
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCREG
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sReconnect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckResQcell
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTtsResult
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSocketStatusCheck
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQMTRecvmode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQMTCFGViewmode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQMTCFGVersion
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQMTCFGDataformat
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQIDEACT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQICSGP
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQIACT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttSub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpenCheck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttDisconnect
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttCreat
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttConnect
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttClose
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckReset
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckQNWINFO
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckGsn
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCSQ
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCPIN
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCOPS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCGREG
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckCCID
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckATV
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckATI
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckATE
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoLedCtrol
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WriteOrder
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoveFirstOrder
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetOrderCnt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandleData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandle_HeartBeat
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_Init
</UL>

<P><STRONG><a name="[259]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[25a]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1c9]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25b]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttSub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpenCheck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttDisconnect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttConnect
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttClose
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardCheck
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[25c]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[25d]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[25e]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[2]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[1e4]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_double
</UL>

<P><STRONG><a name="[1ca]"></a>__hardfp_strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[1]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[25f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[260]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[261]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[7f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1a4]"></a>adc_calibration_enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[19b]"></a>adc_channel_length_config</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, gd32f30x_adc.o(i.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[19f]"></a>adc_data_alignment_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[1a3]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[1a1]"></a>adc_external_trigger_config</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[19d]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[1a2]"></a>adc_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[19c]"></a>adc_inserted_channel_config</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, gd32f30x_adc.o(i.adc_inserted_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_inserted_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[19e]"></a>adc_mode_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[1a0]"></a>adc_special_function_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[118]"></a>cJSON_AddItemToArray</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cjson.o(i.cJSON_AddItemToArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_AddItemToArray &rArr; add_item_to_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
</UL>

<P><STRONG><a name="[eb]"></a>cJSON_AddItemToObject</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, cjson.o(i.cJSON_AddItemToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cJSON_AddItemToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
</UL>

<P><STRONG><a name="[ec]"></a>cJSON_AddNumberToObject</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, cjson.o(i.cJSON_AddNumberToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cJSON_AddNumberToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
</UL>

<P><STRONG><a name="[117]"></a>cJSON_CreateArray</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(i.cJSON_CreateArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_CreateArray &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
</UL>

<P><STRONG><a name="[ed]"></a>cJSON_CreateIntArray</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, cjson.o(i.cJSON_CreateIntArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cJSON_CreateIntArray &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
</UL>

<P><STRONG><a name="[1d6]"></a>cJSON_CreateNumber</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cjson.o(i.cJSON_CreateNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>

<P><STRONG><a name="[e9]"></a>cJSON_CreateObject</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(i.cJSON_CreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_CreateObject &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
</UL>

<P><STRONG><a name="[ea]"></a>cJSON_CreateString</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cjson.o(i.cJSON_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cJSON_CreateString &rArr; cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
</UL>

<P><STRONG><a name="[f0]"></a>cJSON_Delete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingNotifyHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessageHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteUpgradeHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlHandler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessageHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[13d]"></a>cJSON_GetArrayItem</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cjson.o(i.cJSON_GetArrayItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_GetArrayItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_array_item
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
</UL>

<P><STRONG><a name="[13c]"></a>cJSON_GetArraySize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cjson.o(i.cJSON_GetArraySize))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
</UL>

<P><STRONG><a name="[115]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cjson.o(i.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_GetObjectItem &rArr; get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingNotifyHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessageHandler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteUpgradeHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlHandler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessageHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[188]"></a>cJSON_InitHooks</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, cjson.o(i.cJSON_InitHooks))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cJSON_InitHooks &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Config
</UL>

<P><STRONG><a name="[120]"></a>cJSON_IsNumber</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(i.cJSON_IsNumber))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessageHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessageHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[13b]"></a>cJSON_IsString</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(i.cJSON_IsString))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[114]"></a>cJSON_Parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(i.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopChargingNotifyHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessageHandler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteUpgradeHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlHandler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_McardMessageHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessageHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[1dc]"></a>cJSON_ParseWithLengthOpts</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, cjson.o(i.cJSON_ParseWithLengthOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[1db]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cjson.o(i.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[ee]"></a>cJSON_PrintUnformatted</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cjson.o(i.cJSON_PrintUnformatted))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartUpMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LocationMessage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HeartBeatSendMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendCardAuthReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStopChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteStartChargingAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteControlAck
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeAckHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeStopNotify
</UL>

<P><STRONG><a name="[1c2]"></a>dbg_periph_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_dbg.o(i.dbg_periph_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Watchdog_Init
</UL>

<P><STRONG><a name="[11a]"></a>dma_channel_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel4_IRQHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2S_SendData
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[11d]"></a>dma_channel_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2S_SendData
</UL>

<P><STRONG><a name="[1e6]"></a>dma_circulation_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_circulation_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_circulation_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[1e7]"></a>dma_deinit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[1e8]"></a>dma_init</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, gd32f30x_dma.o(i.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[1e9]"></a>dma_interrupt_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[16b]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f30x_dma.o(i.dma_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>dma_memory_address_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_memory_address_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_address_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2S_SendData
</UL>

<P><STRONG><a name="[1ea]"></a>dma_memory_to_memory_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_memory_to_memory_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_to_memory_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[11c]"></a>dma_transfer_number_config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_transfer_number_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_transfer_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2S_SendData
</UL>

<P><STRONG><a name="[1c4]"></a>exti_init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gd32f30x_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Zero_Det_Init
</UL>

<P><STRONG><a name="[1c5]"></a>exti_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Zero_Det_Init
</UL>

<P><STRONG><a name="[16e]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Zero_Det_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1ec]"></a>fmc_bank0_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank0_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank0_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[1ed]"></a>fmc_bank0_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank0_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>

<P><STRONG><a name="[1ee]"></a>fmc_bank1_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank1_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[1ef]"></a>fmc_bank1_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank1_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
</UL>

<P><STRONG><a name="[10a]"></a>fmc_flag_clear</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WriteWord
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Flash_Erase
</UL>

<P><STRONG><a name="[10c]"></a>fmc_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Flash_Erase
</UL>

<P><STRONG><a name="[109]"></a>fmc_page_erase</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, gd32f30x_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Flash_Erase
</UL>

<P><STRONG><a name="[107]"></a>fmc_unlock</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Flash_Erase
</UL>

<P><STRONG><a name="[154]"></a>fmc_word_program</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, gd32f30x_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WriteWord
</UL>

<P><STRONG><a name="[58]"></a>fputc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fputc &rArr; Bsp_DebugSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DebugSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1c0]"></a>fwdgt_config</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, gd32f30x_fwdgt.o(i.fwdgt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Watchdog_Init
</UL>

<P><STRONG><a name="[170]"></a>fwdgt_counter_reload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_fwdgt.o(i.fwdgt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Watchdog_Init
</UL>

<P><STRONG><a name="[1c1]"></a>fwdgt_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_fwdgt.o(i.fwdgt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Watchdog_Init
</UL>

<P><STRONG><a name="[f9]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Qrledtoggle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbConnectStatuProc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Relay_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_BUZE_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_4G_Pwr_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_OFF
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_GD25xx_BufferRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sPowerOff
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
</UL>

<P><STRONG><a name="[fa]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Qrledtoggle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbConnectStatuProc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Insert_Det_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Disboard_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_ON
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_GD25xx_BufferRead
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sPowerOn
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
</UL>

<P><STRONG><a name="[1c3]"></a>gpio_exti_source_select</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32f30x_gpio.o(i.gpio_exti_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Zero_Det_Init
</UL>

<P><STRONG><a name="[198]"></a>gpio_init</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Zero_Det_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Relay_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Insert_Det_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Fuse_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Disboard_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_BUZE_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_4G_Pwr_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiInit
</UL>

<P><STRONG><a name="[16f]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>gpio_pin_remap_config</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Relay_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiInit
</UL>

<P><STRONG><a name="[1f0]"></a>i2s_dma_init</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, i2s.o(i.i2s_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = i2s_dma_init &rArr; i2s_psc_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_disable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_psc_config
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_enable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1f5]"></a>i2s_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.i2s_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[1f2]"></a>i2s_init</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gd32f30x_spi.o(i.i2s_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2s_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[1f3]"></a>i2s_psc_config</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, gd32f30x_spi.o(i.i2s_psc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = i2s_psc_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; system_init &rArr; YA_uart_init &rArr; YA_ComInit &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[18b]"></a>nvic_irq_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>nvic_irq_enable</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, gd32f30x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_TimerInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Zero_Det_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_TimerInit
</UL>

<P><STRONG><a name="[22d]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1f8]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>pvPortMalloc</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[23f]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[21a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[19a]"></a>rcu_adc_clock_config</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_adc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
</UL>

<P><STRONG><a name="[22f]"></a>rcu_all_reset_flag_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_all_reset_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset_reason
</UL>

<P><STRONG><a name="[1f7]"></a>rcu_clock_freq_get</STRONG> (Thumb, 310 bytes, Stack size 84 bytes, gd32f30x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_psc_config
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[228]"></a>rcu_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset_reason
</UL>

<P><STRONG><a name="[1be]"></a>rcu_osci_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Watchdog_Init
</UL>

<P><STRONG><a name="[1bf]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 266 bytes, Stack size 20 bytes, gd32f30x_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Watchdog_Init
</UL>

<P><STRONG><a name="[177]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_TimerInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Relay_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_TimerInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiInit
</UL>

<P><STRONG><a name="[22a]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[229]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[3]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[1ba]"></a>spi_crc_polynomial_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_crc_polynomial_set))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiInit
</UL>

<P><STRONG><a name="[1f6]"></a>spi_dma_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_dma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[1bb]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiInit
</UL>

<P><STRONG><a name="[185]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWrite
</UL>

<P><STRONG><a name="[184]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWrite
</UL>

<P><STRONG><a name="[1f1]"></a>spi_i2s_deinit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32f30x_spi.o(i.spi_i2s_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[183]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWrite
</UL>

<P><STRONG><a name="[1f4]"></a>spi_i2s_interrupt_disable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
</UL>

<P><STRONG><a name="[1b9]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiInit
</UL>

<P><STRONG><a name="[1f9]"></a>system_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system.o(i.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = system_init &rArr; YA_uart_init &rArr; YA_ComInit &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_TimerInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_GpioInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Adc_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_uart_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_Watchdog_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_TimerInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset_reason
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_SpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22e]"></a>system_reset_reason</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, system.o(i.system_reset_reason))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_reset_reason &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_all_reset_flag_clear
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[230]"></a>systick_clksource_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.systick_clksource_set))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[22c]"></a>systick_config</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clksource_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[136]"></a>timer7_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timer.o(i.timer7_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timer7_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Relay_Delay_Start
</UL>

<P><STRONG><a name="[231]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
</UL>

<P><STRONG><a name="[17a]"></a>timer_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f30x_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_TimerInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_TimerInit
</UL>

<P><STRONG><a name="[18d]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_TimerInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_TimerInit
</UL>

<P><STRONG><a name="[18c]"></a>timer_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_IRQHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
</UL>

<P><STRONG><a name="[17b]"></a>timer_init</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_TimerInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_TimerInit
</UL>

<P><STRONG><a name="[18a]"></a>timer_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_TimerInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_TimerInit
</UL>

<P><STRONG><a name="[17d]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_TimerInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_IRQHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_TimerInit
</UL>

<P><STRONG><a name="[189]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>timer_prescaler_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_prescaler_config))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_TimerInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_TimerInit
</UL>

<P><STRONG><a name="[d7]"></a>ulTaskGenericNotifyTake</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(i.ulTaskGenericNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ulTaskGenericNotifyTake &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sTask
</UL>

<P><STRONG><a name="[1a9]"></a>usart_baudrate_set</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gd32f30x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[194]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DebugSend
</UL>

<P><STRONG><a name="[1a8]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[1b1]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[152]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DebugSend
</UL>

<P><STRONG><a name="[1af]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[196]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f30x_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[1ae]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[1ac]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[1ad]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[1ab]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
</UL>

<P><STRONG><a name="[20c]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[227]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, heap_4.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vApplicationMallocFailedHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[21b]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[219]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[20e]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[20d]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[108]"></a>vPortEnterCritical</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortEnterCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WriteWord
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Flash_Erase
</UL>

<P><STRONG><a name="[10b]"></a>vPortExitCritical</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WriteWord
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_Flash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Flash_Erase
</UL>

<P><STRONG><a name="[15a]"></a>vPortFree</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_Ec200sAnalyseGprsData
</UL>

<P><STRONG><a name="[238]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[aa]"></a>vTaskDelay</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srv_Ec200s_Task
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_audio_task
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoTask
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChagreControl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sReconnect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckResQcell
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendRepeatCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttCreat
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckReset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_HardReset
</UL>

<P><STRONG><a name="[149]"></a>vTaskDelete</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UpgradeTask
</UL>

<P><STRONG><a name="[23d]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[222]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[235]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[236]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[c4]"></a>vTaskResume</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskResume &rArr; prvTaskIsTaskSuspended &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>

<P><STRONG><a name="[1fa]"></a>vTaskStartScheduler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>vTaskSuspend</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskSuspend &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>

<P><STRONG><a name="[223]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[72]"></a>vTaskSwitchContext</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[233]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>

<P><STRONG><a name="[237]"></a>xPortStartScheduler</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xPortStartScheduler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[186]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d6]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargeTask
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sTask
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YA_ComInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InitHooks
</UL>

<P><STRONG><a name="[23c]"></a>xQueueGenericCreate</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[217]"></a>xQueueGenericReset</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[153]"></a>xQueueGenericSend</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DebugSend
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
</UL>

<P><STRONG><a name="[b6]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQcellSendCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
</UL>

<P><STRONG><a name="[150]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DebugSend
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
</UL>

<P><STRONG><a name="[b1]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sQcellSendCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttPublish
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
</UL>

<P><STRONG><a name="[23e]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[123]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Task
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RemoteUpgradeHandler
</UL>

<P><STRONG><a name="[d9]"></a>xTaskGenericNotify</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskGenericNotify &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200s_SendNotify
</UL>

<P><STRONG><a name="[161]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswSrv_McardTask
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[14f]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DebugSend
</UL>

<P><STRONG><a name="[23b]"></a>xTaskIncrementTick</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[214]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[240]"></a>xTaskPriorityInherit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[21f]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[226]"></a>xTaskResumeAll</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[213]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[241]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[215]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[216]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[21c]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[21d]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[21e]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[221]"></a>prvUnlockQueue</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[20b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[20f]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[211]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[212]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[5c]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[218]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewTask &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[210]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[234]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[220]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvTaskIsTaskSuspended &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[224]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[225]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[5b]"></a>prvTaskExitError</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[22b]"></a>system_clock_120m_hxtal</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, system_gd32f30x.o(i.system_clock_120m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[187]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f30x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1e5]"></a>dma_periph_and_channel_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_dma.o(i.dma_periph_and_channel_check))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>

<P><STRONG><a name="[5f]"></a>Abstr_Ec200sCheckATE</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckATE &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>Abstr_Ec200sCheckATI</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckATI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckATI &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>Abstr_Ec200sCheckATV</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckATV))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckATV &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>Abstr_Ec200sCheckCCID</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckCCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckCCID &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>Abstr_Ec200sCheckCGREG</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckCGREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckCGREG &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>Abstr_Ec200sCheckCOPS</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckCOPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckCOPS &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>Abstr_Ec200sCheckCPIN</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckCPIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckCPIN &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>Abstr_Ec200sCheckCSQ</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckCSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckCSQ &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>Abstr_Ec200sCheckGsn</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckGsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckGsn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>Abstr_Ec200sCheckQNWINFO</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckQNWINFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sCheckQNWINFO &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>Abstr_Ec200sCheckReset</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sCheckReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Abstr_Ec200sCheckReset &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sPowerOn
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sPowerOff
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>Abstr_Ec200sGetHttpData</STRONG> (Thumb, 306 bytes, Stack size 112 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sGetHttpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Abstr_Ec200sGetHttpData &rArr; Abstr_Ec200sGetHttpDataSize &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_GetCharFromFifo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_FifoFlush
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sUartSend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>

<P><STRONG><a name="[b0]"></a>Abstr_Ec200sGetHttpDataSize</STRONG> (Thumb, 190 bytes, Stack size 104 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sGetHttpDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Abstr_Ec200sGetHttpDataSize &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_GetCharFromFifo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_FifoFlush
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sUartSend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
</UL>

<P><STRONG><a name="[ba]"></a>Abstr_Ec200sGetHttpFileSize</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sGetHttpFileSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Abstr_Ec200sGetHttpFileSize &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_GetCharFromFifo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200s_FifoFlush
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BswDrv_Ec200sUartSend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>

<P><STRONG><a name="[c5]"></a>Abstr_Ec200sMqttClose</STRONG> (Thumb, 96 bytes, Stack size 200 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sMqttClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Abstr_Ec200sMqttClose &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttCreat
</UL>

<P><STRONG><a name="[c6]"></a>Abstr_Ec200sMqttConnect</STRONG> (Thumb, 104 bytes, Stack size 352 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sMqttConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Abstr_Ec200sMqttConnect &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttCreat
</UL>

<P><STRONG><a name="[6f]"></a>Abstr_Ec200sMqttCreat</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sMqttCreat))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = Abstr_Ec200sMqttCreat &rArr; Abstr_Ec200sMqttConnect &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttSub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpenCheck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttOpen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttDisconnect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttConnect
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttClose
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>Abstr_Ec200sMqttDisconnect</STRONG> (Thumb, 92 bytes, Stack size 200 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sMqttDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Abstr_Ec200sMqttDisconnect &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttCreat
</UL>

<P><STRONG><a name="[c7]"></a>Abstr_Ec200sMqttOpen</STRONG> (Thumb, 110 bytes, Stack size 344 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sMqttOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = Abstr_Ec200sMqttOpen &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttCreat
</UL>

<P><STRONG><a name="[c8]"></a>Abstr_Ec200sMqttOpenCheck</STRONG> (Thumb, 86 bytes, Stack size 200 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sMqttOpenCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Abstr_Ec200sMqttOpenCheck &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttCreat
</UL>

<P><STRONG><a name="[c9]"></a>Abstr_Ec200sMqttSub</STRONG> (Thumb, 98 bytes, Stack size 208 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sMqttSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Abstr_Ec200sMqttSub &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sMqttCreat
</UL>

<P><STRONG><a name="[6a]"></a>Abstr_Ec200sQIACT</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sQIACT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sQIACT &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>Abstr_Ec200sQICSGP</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sQICSGP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sQICSGP &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>Abstr_Ec200sQIDEACT</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sQIDEACT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sQIDEACT &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>Abstr_Ec200sQMTCFGDataformat</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sQMTCFGDataformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sQMTCFGDataformat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>Abstr_Ec200sQMTCFGVersion</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sQMTCFGVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sQMTCFGVersion &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>Abstr_Ec200sQMTCFGViewmode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sQMTCFGViewmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sQMTCFGViewmode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>Abstr_Ec200sQMTRecvmode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sQMTRecvmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abstr_Ec200sQMTRecvmode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_CheckModeCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bswabstr_ec200s.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>Abstr_Ec200sSendRepeatCmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sSendRepeatCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Abstr_Ec200sSendRepeatCmd &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sHttpGetFrimware
</UL>

<P><STRONG><a name="[d5]"></a>Abstr_Ec200sSocketStatusCheck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bswabstr_ec200s.o(i.Abstr_Ec200sSocketStatusCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Abstr_Ec200sSocketStatusCheck &rArr; Abstr_Ec200sSendCmd &rArr; _Abstr_Ec200sSendCmd &rArr; Abstr_Ec200sCheckRes &rArr; GetCsq &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sSendCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sTask
</UL>

<P><STRONG><a name="[a8]"></a>GetTtsResult</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bswabstr_ec200s.o(i.GetTtsResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetTtsResult &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sCheckRes
</UL>

<P><STRONG><a name="[b7]"></a>mystrstr</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bswabstr_ec200s.o(i.mystrstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mystrstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpFileSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpDataSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abstr_Ec200sGetHttpData
</UL>

<P><STRONG><a name="[102]"></a>App_CkbProtoGetPktSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_ckbproto.o(i.App_CkbProtoGetPktSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_CkbProtoGetPktSum
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoSendPkt
</UL>

<P><STRONG><a name="[ff]"></a>App_CkbProtoHandle_CardProc</STRONG> (Thumb, 88 bytes, Stack size 280 bytes, app_ckbproto.o(i.App_CkbProtoHandle_CardProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = App_CkbProtoHandle_CardProc &rArr; App_CkbProtoLedCtrol &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoCardCtrol
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoLedCtrol
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandleData
</UL>

<P><STRONG><a name="[fe]"></a>App_CkbProtoHandle_HeartBeat</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_ckbproto.o(i.App_CkbProtoHandle_HeartBeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = App_CkbProtoHandle_HeartBeat &rArr; App_CkbProtoHeartBeatAck &rArr; App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetRtcCount
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHeartBeatAck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHandleData
</UL>

<P><STRONG><a name="[fc]"></a>App_CkbProtoSendPkt</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_ckbproto.o(i.App_CkbProtoSendPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = App_CkbProtoSendPkt &rArr; Bsp_UartSendData &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UartSendData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoGetPktSum
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoCardCtrol
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoLedCtrol
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CkbProtoHeartBeatAck
</UL>

<P><STRONG><a name="[1d1]"></a>add_item_to_array</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cjson.o(i.add_item_to_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_item_to_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[1d3]"></a>add_item_to_object</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, cjson.o(i.add_item_to_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = add_item_to_object &rArr; cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cast_away_const
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>

<P><STRONG><a name="[1de]"></a>buffer_skip_whitespace</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cjson.o(i.buffer_skip_whitespace))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[1d7]"></a>cJSON_New_Item</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[1d5]"></a>cJSON_strdup</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cjson.o(i.cJSON_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_strdup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[1e1]"></a>case_insensitive_strcmp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cjson.o(i.case_insensitive_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[1d4]"></a>cast_away_const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cjson.o(i.cast_away_const))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[1e3]"></a>compare_double</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, cjson.o(i.compare_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = compare_double &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[1eb]"></a>ensure</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, cjson.o(i.ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ensure &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
</UL>

<P><STRONG><a name="[1d9]"></a>get_array_item</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cjson.o(i.get_array_item))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
</UL>

<P><STRONG><a name="[1fe]"></a>get_decimal_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cjson.o(i.get_decimal_point))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[1da]"></a>get_object_item</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cjson.o(i.get_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[1fc]"></a>parse_array</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[232]"></a>parse_hex4</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, cjson.o(i.parse_hex4))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[1fd]"></a>parse_number</STRONG> (Thumb, 316 bytes, Stack size 96 bytes, cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[1ff]"></a>parse_object</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[200]"></a>parse_string</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[1df]"></a>parse_value</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[1e0]"></a>print</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, cjson.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
</UL>

<P><STRONG><a name="[204]"></a>print_array</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, cjson.o(i.print_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = print_array &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[205]"></a>print_number</STRONG> (Thumb, 318 bytes, Stack size 88 bytes, cjson.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_double
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[207]"></a>print_object</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, cjson.o(i.print_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[209]"></a>print_string</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cjson.o(i.print_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = print_string &rArr; print_string_ptr &rArr; ensure &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[208]"></a>print_string_ptr</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, cjson.o(i.print_string_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = print_string_ptr &rArr; ensure &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[202]"></a>print_value</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, cjson.o(i.print_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[1dd]"></a>skip_utf8_bom</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cjson.o(i.skip_utf8_bom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = skip_utf8_bom &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
</UL>

<P><STRONG><a name="[1d2]"></a>suffix_object</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(i.suffix_object))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>

<P><STRONG><a name="[203]"></a>update_offset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cjson.o(i.update_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[201]"></a>utf16_literal_to_utf8</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, cjson.o(i.utf16_literal_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[1cc]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1cf]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ce]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[59]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[1cb]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[7a]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4f]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
